# Include shared CI
include:
  - project: "epi2melabs/ci-templates"
    file: "wf-containers.yaml"

variables:
  NF_WORKFLOW_OPTS: "--fastq test_data/HG002_small_test.fastq.gz --alignment_threads 2"
  RELEASE_WORKFLOW: "no"
  CI_FLAVOUR: "new"

docker-run:
  tags: [large_ram]

  # Define a 1D job matrix to inject a variable named MATRIX_NAME into
  #   the CI environment, we can use the value of MATRIX_NAME to determine
  #   which options to apply as part of the rules block below
  # NOTE There is a slightly cleaner way to define this matrix to include
  #   the variables, but it is broken when using long strings! See CW-756
  parallel:
    matrix:
      - MATRIX_NAME: [
          "defaults",
          "bam_in",
          "no_mapping",
          "non_telomeric_reads",
          "missing_reference",
          "sample_sheet_same",
          "sample_sheet_diff",
          "mapq61"
        ]
  # TODO Add in trim and barcode specific tests to check that is passed through
  rules:
    # NOTE As we're overriding the rules block for the included docker-run
    #   we must redefine this CI_COMMIT_BRANCH rule to prevent docker-run
    #   being incorrectly scheduled for "detached merge request pipelines" etc.
    - if: ($CI_COMMIT_BRANCH == null || $CI_COMMIT_BRANCH == "dev-template")
      when: never
    - if: $MATRIX_NAME == "defaults"
      variables:
        NF_IGNORE_PROCESSES: coverage_calc
    - if: $MATRIX_NAME == "bam_in"
      variables:
        NF_WORKFLOW_OPTS: "--bam test_data/samples/ --alignment_threads 2"
        NF_IGNORE_PROCESSES: coverage_calc
    - if: $MATRIX_NAME == "skip_mapping"
      variables:
        NF_WORKFLOW_OPTS: "--fastq test_data/HG002_small_test.fastq.gz --mapping false --alignment_threads 2"
        NF_IGNORE_PROCESSES: coverage_calc
    - if: $MATRIX_NAME == "non_telomeric_reads"
      variables:
        NF_WORKFLOW_OPTS: "--bam test_data/non_telomeric_1000.bam"
        NF_IGNORE_PROCESSES: coverage_calc
        ASSERT_NEXTFLOW_FAILURE: "yes"
        ASSERT_NEXTFLOW_FAILURE_REXP: "No valid samples found. Exiting workflow."
    - if: $MATRIX_NAME == "missing_reference"
      variables:
        NF_WORKFLOW_OPTS: "--fastq test_data/HG002_small_test.fastq.gz --reference im_not_here.fasta.gz --alignment_threads 2"
        ASSERT_NEXTFLOW_FAILURE: "yes"
    - if: $MATRIX_NAME == "sample_sheet_same"
      variables:
        NF_WORKFLOW_OPTS: "--bam test_data/samples --sample_sheet test_data/sample_sheet_same_ref.csv --alignment_threads 2"
        NF_IGNORE_PROCESSES: coverage_calc
    - if: $MATRIX_NAME == "sample_sheet_diff"
      variables:
        NF_WORKFLOW_OPTS: "--bam test_data/samples --sample_sheet test_data/sample_sheet_different_ref.csv --alignment_threads 2"
        NF_IGNORE_PROCESSES: coverage_calc
    # Check the mapq quality filter does something
    - if: $MATRIX_NAME == "map61"
      variables:
        NF_WORKFLOW_OPTS: "--fastq test_data/HG002_small_test.fastq.gz --reference data/HG002qpMP_reference.fasta.gz --mapq 61 --alignment_threads 2"
        ASSERT_NEXTFLOW_FAILURE: "yes"
        ASSERT_NEXTFLOW_FAILURE_REXP : "Error executing process > 'pipeline:filtering (1)"
   
        
    
